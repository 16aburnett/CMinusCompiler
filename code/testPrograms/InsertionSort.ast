ProgramNode:

  VariableDeclaration: x[20]: Int type

  Function: continueSorting: Int type
    Parameter: a[]: Int type
    Parameter: index: Int type
    Parameter: temp: Int type
    CompoundStatement:
      VariableDeclaration: keepGoing: Int type
      If
        RelationalExpression: >=
          Left:
            Variable: index: Int type
          Right:
            Integer: 1
        CompoundStatement:
          ExpressionStatement:
            Assignment:
              Variable: keepGoing: Int type
              Integer: 1
        If
          RelationalExpression: <
            Left:
              Variable: temp: Int type
            Right:
              Subscript: x: Int type
                Index:
                  AdditiveExpression: -
                    Left:
                      Variable: index: Int type
                    Right:
                      Integer: 1
          CompoundStatement:
            ExpressionStatement:
              Assignment:
                Variable: keepGoing: Int type
                Integer: 1
          CompoundStatement:
            ExpressionStatement:
              Assignment:
                Variable: keepGoing: Int type
                Integer: 0
      Return
        Variable: keepGoing: Int type

  Function: sort: Void type
    Parameter: a[]: Int type
    Parameter: size: Int type
    CompoundStatement:
      VariableDeclaration: temp: Int type
      VariableDeclaration: currentIndex: Int type
      VariableDeclaration: index: Int type
      VariableDeclaration: keepGoing: Int type
      ExpressionStatement:
        Assignment:
          Variable: keepGoing: Int type
          Integer: 1
      ExpressionStatement:
        Assignment:
          Variable: currentIndex: Int type
          Integer: 1
      While
        RelationalExpression: <
          Left:
            Variable: currentIndex: Int type
          Right:
            Variable: size: Int type
        CompoundStatement:
          ExpressionStatement:
            Assignment:
              Variable: temp: Int type
              Subscript: x: Int type
                Index:
                  Variable: currentIndex: Int type
          ExpressionStatement:
            Assignment:
              Variable: index: Int type
              Variable: currentIndex: Int type
          While
            Assignment:
              Variable: keepGoing: Int type
              RelationalExpression: ==
                Left:
                  FunctionCall: continueSorting: Int type
                    Arguments:
                      Variable: x: Int type
                      Variable: index: Int type
                      Variable: temp: Int type
                Right:
                  Integer: 1
            CompoundStatement:
              ExpressionStatement:
                Assignment:
                  Subscript: x: Int type
                    Index:
                      Variable: index: Int type
                  Subscript: x: Int type
                    Index:
                      AdditiveExpression: -
                        Left:
                          Variable: index: Int type
                        Right:
                          Integer: 1
              ExpressionStatement:
                Assignment:
                  Variable: index: Int type
                  AdditiveExpression: -
                    Left:
                      Variable: index: Int type
                    Right:
                      Integer: 1
          ExpressionStatement:
            Assignment:
              Variable: keepGoing: Int type
              Integer: 1
          ExpressionStatement:
            Assignment:
              Subscript: x: Int type
                Index:
                  Variable: index: Int type
              Variable: temp: Int type
          ExpressionStatement:
            Assignment:
              Variable: currentIndex: Int type
              AdditiveExpression: +
                Left:
                  Variable: currentIndex: Int type
                Right:
                  Integer: 1

  Function: main: Void type
    CompoundStatement:
      VariableDeclaration: size: Int type
      VariableDeclaration: i: Int type
      VariableDeclaration: num: Int type
      ExpressionStatement:
        Assignment:
          Variable: size: Int type
          Integer: 20
      ExpressionStatement:
        Assignment:
          Variable: i: Int type
          Variable: size: Int type
      ExpressionStatement:
        Assignment:
          Variable: num: Int type
          Integer: 0
      While
        RelationalExpression: >
          Left:
            Variable: i: Int type
          Right:
            Integer: 0
        CompoundStatement:
          ExpressionStatement:
            Assignment:
              Subscript: x: Int type
                Index:
                  AdditiveExpression: -
                    Left:
                      Variable: i: Int type
                    Right:
                      Integer: 1
              Variable: num: Int type
          ExpressionStatement:
            Assignment:
              Variable: i: Int type
              AdditiveExpression: -
                Left:
                  Variable: i: Int type
                Right:
                  Integer: 1
          ExpressionStatement:
            Assignment:
              Variable: num: Int type
              AdditiveExpression: +
                Left:
                  Variable: num: Int type
                Right:
                  Integer: 1
      ExpressionStatement:
        FunctionCall: sort: Void type
          Arguments:
            Variable: x: Int type
            Variable: size: Int type
      ExpressionStatement:
        Assignment:
          Variable: i: Int type
          Integer: 0
      While
        RelationalExpression: <
          Left:
            Variable: i: Int type
          Right:
            Variable: size: Int type
        CompoundStatement:
          ExpressionStatement:
            FunctionCall: output: Void type
              Arguments:
                Subscript: x: Int type
                  Index:
                    Variable: i: Int type
          ExpressionStatement:
            Assignment:
              Variable: i: Int type
              AdditiveExpression: +
                Left:
                  Variable: i: Int type
                Right:
                  Integer: 1